generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model flows {
  id            BigInt          @id @default(autoincrement())
  created_at    DateTime        @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at    DateTime        @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  workspace_id  BigInt?
  workspaces    workspaces?     @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment_nodes comment_nodes[]
  input_nodes   input_nodes[]
  prompt_nodes  prompt_nodes[]
}

model prompt_nodes {
  id              BigInt    @id @default(autoincrement())
  created_at      DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at      DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  label           String    @default("")
  description     String    @default("")
  result          String    @default("")
  prompt_settings Json      @default("{     \"model\": \"text-davinci-002\",     \"temperature\": 0,     \"max_tokens\": 500,     \"top_p\": 1,     \"best_of\": 1,     \"frequency_penalty\": 0,     \"presence_penalty\": 0,     \"stop\": [] }") @db.Json
  chunks_range    Int[]     @default(dbgenerated("ARRAY[(0)::smallint, (0)::smallint]")) @db.SmallInt
  position        Decimal[] @default([0, 0]) @db.Decimal
  contents        Json      @default("{ \"ops\": [] }") @db.Json
  flow_id         BigInt?
  flows           flows?    @relation(fields: [flow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model workspaces {
  id          BigInt         @id(map: "workspace_pkey") @default(autoincrement())
  created_at  DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at  DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  title       String         @default("Untitled")
  description String         @default("")
  type        workspace_type @default(PRIVATE)
  create_by   String?        @db.Uuid
  flows       flows[]
}

model input_nodes {
  id            BigInt        @id @default(autoincrement())
  created_at    DateTime      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  chunk_size    Int           @default(500) @db.SmallInt
  chunk_overlap Int           @default(0) @db.SmallInt
  chunk_pattern String        @default("")
  file          String?
  label         String        @default("Input")
  position      Decimal[]     @default([0, 0]) @db.Decimal
  chunking_type chunking_type @default(TOKENS)
  flow_id       BigInt?
  flows         flows?        @relation(fields: [flow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comment_nodes {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  contents   Json?     @default("{ \"ops\": [] }") @db.Json
  position   Decimal[] @default([0, 0]) @db.Decimal
  flow_id    BigInt?
  flows      flows?    @relation(fields: [flow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum chunking_type {
  PATTERN
  TOKENS
}

enum gpt3_models {
  text_davinci_002      @map("text-davinci-002")
  text_curie_001        @map("text-curie-001")
  text_babbage_001      @map("text-babbage-001")
  text_ada_001          @map("text-ada-001")
  text_davinci_001      @map("text-davinci-001")
  davinci_instruct_beta @map("davinci-instruct-beta")
  davinci
  curie_instruct_beta   @map("curie-instruct-beta")
  curie
  babbage
  ada
}

enum node_type {
  INPUT
  PROMPT
  COMMENT
}

enum workspace_type {
  PUBLIC
  PRIVATE
}
